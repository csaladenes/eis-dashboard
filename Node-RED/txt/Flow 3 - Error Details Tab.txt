[{"id":"68722f6b.c85fa","type":"comment","z":"6d303948.304338","name":"Error Details Tab","info":"","x":93,"y":27,"wires":[]},{"id":"69c378b6.fce488","type":"link in","z":"6d303948.304338","name":"Error Details Tab","links":["54db8307.48badc","85f03be5.ae5ee8"],"x":209.2334384918213,"y":249.20010948181152,"wires":[["99397fac.08379","780ff839.05d008","e464a408.3c5568","12204bc2.4e9874","8c0bb250.11824","7316d40f.0d776c"]]},{"id":"e68961c0.054b9","type":"ui_button","z":"6d303948.304338","name":"Export","group":"fb8c6177.77efd","order":2,"width":0,"height":0,"passthru":false,"label":"Export to .CSV","color":"","bgcolor":"","icon":"","payload":"All Errors","payloadType":"str","topic":"","x":154.06684112548828,"y":1028.0672216415405,"wires":[["6fe5d813.a02328"]]},{"id":"6fe5d813.a02328","type":"ui_ui_control","z":"6d303948.304338","name":"All Errors","x":312.06690216064453,"y":1028.0674266815186,"wires":[[]]},{"id":"593287ff.26d1b8","type":"ui_template","z":"6d303948.304338","group":"fb8c6177.77efd","name":"Error Graph","order":1,"width":"10","height":"10","format":"<!-- See the read me comment node. Colin Law's original notes follow -->\n\n<!--\nA node-red Dashboard UI template to draw charts using chart.js\nBefore use download the file Chart.bundle.min.js from chartjs.org and \nsave in an appropriate folder (e.g. .node-red/static). \nIn settings.js set httpStatic to the full path of that folder and restart node-red.\nMake sure that the options for 'Pass through messages' and 'Add output messages' \nin this node are cleared.\nFor basic use set the id and size you want in the canvas tag and set chartID to the id\nSetup chartDef as required for your chart (see the chart.js docs)\nIn addition, for each dataset specify in chartDef the message topic that you will use for that channel.\nTo (optionally) provide the chart with a one-off set of data send the node a message with:\nmsg.action = \"load\"\nmsg.payload = [\n{topic: \"mytopic1\", data: [{x: x1,y:y2},{x:x2,y:y2},...]},\n{topic: \"mytopic2\", data: [{x: x1,y:y2},{x:x2,y:y2},...]},\n...]\nWhere mytopic1 and mytopic2 are the the topics specified in the chartDef\n\nTo provide the chart with data incrementally (for a time series for example)\nsend it messages of the form\n{topic: \"mytopic1\", payload: {x:xvalue,y:yvalue}}\nThe chart will be updated as each sample is provided.\nTo limit the growth of the chart set chartMaxPoints and/or chartTimeSpan in the Chart Helper node\nas described at the head of that node.\nIf you find that chart seems to flicker and scroll bars come and go then try \nsetting a size other than auto in the Size specification for this node.\n\nFor Bar charts the x value is the label for the bar and the y value is the bar value\n\nNote that since the chart samples are stored in the browser then the chart will be cleared each\ntime the browser is refreshed (and will be clear on initially opening the view). In order to \nprovided persistency over browser opening and refresh this node may be used in conjunction with\nthe Chart Helper function node.  Details for its use are in the source of that node.\n\nIf your flow includes more that one instance of this script then the line fetching \nChart.bundle.min.js need only be included in one of them\n-->\n\n<script src=\"/Chart.bundle.min.js\"></script>\n<canvas id=\"myChartSimple1\" width=\"300\" height=\"300\"></canvas>\n<script>\n(function() {\n    var chartID = \"myChartSimple1\";           // set this to the id you have specified in the canvas tag above\n    // setup the chart definition as defined in the chart.js documentation, in addition setting up the topic\n    // for each channel\n    var chartDef = {\n        type: 'line',\n        data: {\n            datasets: [{\n                topic: \"Sin\",    // used here not by chart.js\n                label: \"Sin\",\n                yAxisID: \"1\",\n                fill: false,\n                lineTension: 0,\n                borderColor: \"#0000ff\",\n                pointRadius: 5,\n                pointHoverRadius: 5,\n                pointBorderColor: \"#0000ff\",\n                pointBackgroundColor: \"#0000ff\",\n                backgroundColor:  \"#0000ff\",\n                borderWidth: 1,\n                data: []  // data is written here later\n            }, {\n                topic: \"Triangle\",    // used here not by chart.js\n                label: \"Triangle\",\n                yAxisID: \"2\",\n                fill: false,\n                lineTension: 0,\n                borderColor: \"#ff0000\",\n                pointRadius: 5,\n                pointHoverRadius: 5,\n                pointBorderColor: \"#ff0000\",\n                pointBackgroundColor: \"#ff0000\",\n                backgroundColor:  \"#ff0000\",\n                borderWidth: 1,\n                data: []  // data is written here later\n            }]\n        },\n        options: {\n            scales: {\n                xAxes: [{\n                    type: 'linear',\n                    position: 'bottom'\n                    }\n                ],\n                yAxes: [{\n                    id: \"1\",\n                    ticks: {\n                        min: -1,\n                        max: 1,\n                        stepSize: 0.2\n                    }\n                }, {\n                    id: \"2\",\n                    ticks: {\n                        min: -10,\n                        max: 10,\n                        stepSize: 2\n                    }\n                }]\n            },\n            animation: {\n                duration: 0\n            }\n        }\n    }\n        \n/***** You shouldn't normally need to change anything below here *****/    \n    var myChart = null;\n    var loaded = false;     // indicates whether we have already had a load action\n    var chartTimeSpan;\n    var chartMaxPoints;\n\n    function doChart(msg, scope) {\n        if (!myChart) {\n            // chart does not exist so load the data and create it\n            var ctx = document.getElementById(chartID);\n            myChart = new Chart(ctx, chartDef);     \n        }\n        // chart already exists, update it\n        var datasets = myChart.data.datasets;\n        // is this a load or preload action?\n        if (msg.action === \"load\" || msg.action === \"preload\") {\n            // yes, do not allow preload if we have already had a load\n            // so do it if this is a load or we have not previously had a load\n            if (msg.action === \"load\" || !loaded) {\n                // pick up chartTimeSpan and chartMaxPoints if they have been provided\n                if (typeof msg.chartTimeSpan != 'undefined') {\n                    chartTimeSpan = msg.chartTimeSpan;\n                }\n                if (typeof msg.chartMaxPoints != 'undefined') {\n                    chartMaxPoints = msg.chartMaxPoints;\n                }\n                    \n                // replace existing data for matching topics\n                for (var j = 0; j < msg.payload.length; j++) {\n                    var topic = msg.payload[j].topic;\n                    // find it in the chart\n                    for (var i = 0; i < datasets.length; i++) {\n                        if (datasets[i].topic == topic) {\n                            // if stripping old samples by time is required then ensure the x value is Date\n                            if (chartTimeSpan > 0 ) {\n                                var data = msg.payload[j].data;\n                                for (var k = 0; k < data.length; k++) {\n                                    if (typeof data[k].x === \"string\") {\n                                        data[k].x = new Date(data[k].x);\n                                    }\n                                }\n                            }\n                            if (chartDef.type !== \"bar\") {\n                                datasets[i].data = msg.payload[j].data;\n                            } else {\n                                // bar chart so x values must go to labels and y values to dataset\n                                datasets[i].data = [];\n                                myChart.data.labels = [];\n                                var data = msg.payload[j].data;\n                                for (var k = 0; k < data.length; k++) {\n                                    datasets[i].data.push(data[k].y);\n                                    myChart.data.labels.push(data[k].x);\n                                }\n                            }\n                            break;\n                        }\n                    }\n                }\n            }\n            if (msg.action === \"load\") loaded = true;\n            myChart.update();\n        } else {\n            // does the topic match one of the datasets?\n            for (var i = 0; i < datasets.length; i++) {\n                if (datasets[i].topic == msg.topic) {\n                    // if stripping old samples by time is required then ensure the x value is Date\n                    if (chartTimeSpan > 0 && typeof msg.payload.x === \"string\") {\n                        msg.payload.x = new Date(msg.payload.x);\n                    }\n                    if (chartDef.type !== \"bar\") {\n                        datasets[i].data.push(msg.payload);\n                    } else {\n                         // bar chart so x value must go to labels and y value to dataset\n                        datasets[i].data.push(msg.payload.y);\n                        myChart.data.labels.push(msg.payload.x);\n                    }\n                    myChart.update();\n                    break;\n                }\n            }\n        }\n        // strip off samples older than now\n        // charTimeSpan == 0 implies don't do it\n        var shifted = false;\n        if (chartTimeSpan > 0) {\n            var now = new Date();\n            var oldestTimeAllowed = now - chartTimeSpan;\n            for (var i = 0; i < datasets.length; i++) {\n                dataset = datasets[i];\n                while(dataset.data[0] && getTime(dataset.data[0].x) < oldestTimeAllowed) {\n                    dataset.data.shift();\n                    shifted = true;\n                }\n            }\n        }\n        // strip samples off the front if there are now too many\n        // charTimeSpan == 0 implies don't do it\n        if (chartMaxPoints > 0) {\n            for (var i = 0; i < datasets.length; i++) {\n                dataset = datasets[i];\n                while(dataset.data.length > chartMaxPoints) {\n                    dataset.data.shift();\n                    shifted = true;\n                }\n            }\n        }\n        if (shifted) {\n            myChart.update();\n        }\n    };\n\n    // gets the time of an x value, works for strings or Date types\n    function getTime(x) {\n        if (typeof x === \"string\") x = new Date(x);\n        return x.getTime();\n    }\n    \n    // builds the preload message for sending back to the chart helper\n    function preloadMsg() {\n        var preMsg = {action: \"preload\", payload: \"preload\"};\n        // build array of topics in chart\n        var topics = [];\n        for (var i=0; i<chartDef.data.datasets.length; i++) {\n            topics.push(chartDef.data.datasets[i].topic);\n        }\n        preMsg.topics = topics;\n        // has the chart already been created\n        if (myChart) {\n            preMsg.lastXValue = 1;\n        } else {\n            preMsg.lastXValue = 0;\n        }\n        return preMsg;\n    }\n\n    (function(scope) {\n        // this code gets run when the a view is opened on the node in the browser\n        // send a preload message back to node red to ask it send\n        // us a complete set of data. Pass down max points and time span to the helper node for it to use\n        // plus an array of the topics of interest\n        scope.send( preloadMsg() );\n        \n        scope.$watch('msg', function(msg) {\n            if (msg) {\n                doChart(msg, scope);\n            }\n        });\n    })(scope);\n})();\n</script>\n","storeOutMessages":false,"fwdInMessages":false,"templateScope":"local","x":1447.616844177246,"y":852.766881942749,"wires":[[]]},{"id":"400a32a1.62c5ac","type":"comment","z":"6d303948.304338","name":"Ref.","info":"This chart extends node-red-dashboard and the here:\nhttps://flows.nodered.org/flow/720044a3c587a310813a9326ed3cb08a\n\nWhich in turn expanded on the work by Colin Law here:\nhttp://flows.nodered.org/flow/c3dc75c47323a2754f5285225bce64b5\n","x":1440.067497253418,"y":811.8838691711426,"wires":[]},{"id":"e38ee703.cc84d8","type":"function","z":"6d303948.304338","name":"Populate Error List","func":"var errors = global.get(\"errors\"); // list all errors\nvar array = []; // to return\n\nfor(var i = 0; i < errors.length; i++){ // for every error\n\n    // if the error type is the one specified or 'all'\n    if (errors[i].error_type==global.get(\"errortype\") || global.get(\"errortype\")===0){\n        \n        // if the logger code is the one for this asset \n        if(errors[i].logger_code==global.get(\"loggerCode\")){\n            \n            // if the logger channel is the one for this asset\n            if(errors[i].logger_channel==global.get(\"loggerChannel\")){\n                \n                var lookup = global.get(\"errortypelookup\");\n                var errDesc = \"\";\n                for(var k = 0; k < lookup.length; k++){\n                    if (lookup[k].id == errors[i].error_type){\n                        errDesc = lookup[k].description;\n                    }\n                }\n                \n                array.push({ // Add important sesnor data to msg payload\n                    errorType: errDesc, // errors[i].error_type,\n                    loggerCode: errors[i].logger_code,\n                    loggerChannel: errors[i].logger_channel,\n                    time: errors[i].timeVal,\n                });\n            }\n        }\n    }\n}\n\nmsg.payload = array; // return complete list of condensed sensor data\nmsg.topic = \"populate errors\";\nreturn msg;\n","outputs":1,"noerr":0,"x":727.0002212524414,"y":487.9335060119629,"wires":[["5834e8cf.1ccf48","13c05f44.827051"]]},{"id":"5834e8cf.1ccf48","type":"debug","z":"6d303948.304338","name":"","active":false,"console":"false","complete":"payload","x":963.0002555847168,"y":526.9335231781006,"wires":[]},{"id":"c43a7f8f.b8728","type":"ui_dropdown","z":"6d303948.304338","name":"Error","label":"Error Type","place":"All","group":"8757672e.00c4c8","order":3,"width":"5","height":"1","passthru":false,"options":[{"label":"","value":"","type":"str"}],"payload":"","topic":"","x":354.00016689300537,"y":487.9334535598755,"wires":[["ddb4dba0.43e588"]]},{"id":"553afc29.456c14","type":"link in","z":"6d303948.304338","name":"SystemList In","links":["24248a52.5b35f6"],"x":253.00016689300537,"y":487.9334535598755,"wires":[["c43a7f8f.b8728"]]},{"id":"ddb4dba0.43e588","type":"function","z":"6d303948.304338","name":"Store","func":"/* */\n\nglobal.set(\"errortype\", msg.payload);\nreturn msg;","outputs":1,"noerr":0,"x":492.0001974105835,"y":487.9334535598755,"wires":[["e38ee703.cc84d8"]]},{"id":"e0c6f314.51f65","type":"link out","z":"6d303948.304338","name":"Error List Click","links":["51e43c3f.855a24"],"x":1076.167194366455,"y":488.3336372375488,"wires":[]},{"id":"13c05f44.827051","type":"ui_template","z":"6d303948.304338","group":"8757672e.00c4c8","name":"Error List","order":4,"width":"15","height":"10","format":"<!DOCTYPE html>\n\n<style>\n    table {\n        border-collapse: collapse;\n    }\n    th, td {\n        border-bottom: 1px solid #ddd;\n        padding: 10px;\n        text-align: left;\n    }\n    th {\n        background-color: lightblue;\n        color: white;\n    }\n    .numeric {\n        text-align: right;\n        padding-right: 15px;\n    }\n    tbody tr:hover {\n        color: darkorange;\n        background-color: #f5f5f5;\n        cursor: pointer;\n    }\n</style>\n\n<table style=\"width: 100%;\">\n    <thead>\n        <tr>\n            <th>Error Type</th>\n            <th>Time</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr ng-repeat=\"row in msg.payload\" ng-click=\"sendRow(row)\">\n            <td class=\"row\">{{row.errorType}}</td>\n            <td class=\"row\">{{row.time}}</td>\n        </tr>\n    </tbody>\n</table>\n\n<script>\n(function($scope) {\n    $scope.sendRow = function(obj) {\n        //console.dir(obj);\n        $scope.send({ \"payload\": obj });\n    };\n})(scope);\n</script>","storeOutMessages":false,"fwdInMessages":false,"templateScope":"local","x":952.0002555847168,"y":487.93352603912354,"wires":[["e0c6f314.51f65"]]},{"id":"ef6994b7.5279c8","type":"link in","z":"6d303948.304338","name":"All Errors In","links":["54db8307.48badc","85f03be5.ae5ee8"],"x":325.000280380249,"y":566.9335422515869,"wires":[["63baa2b6.8e07bc","6221e9eb.2dee78"]]},{"id":"63baa2b6.8e07bc","type":"function","z":"6d303948.304338","name":"Incoming Code","func":"msg.payload = msg.payload.loggerCode;\nif(msg.payload !== null){\n    global.set(\"loggerCode\", msg.payload);\n}\nelse {\n    global.set(\"loggerCode\", \"\");\n}\n//msg.enabled = false;\nreturn msg;","outputs":1,"noerr":0,"x":463.23357009887695,"y":527.9335327148438,"wires":[["e38ee703.cc84d8"]]},{"id":"6221e9eb.2dee78","type":"function","z":"6d303948.304338","name":"Incoming Chan.","func":"msg.payload = msg.payload.loggerChannel;\nif(msg.payload !== null){\n    global.set(\"loggerChannel\", msg.payload);\n}\nelse {\n    global.set(\"loggerChannel\", \"\");\n}\n//msg.enabled = false;\nreturn msg;","outputs":1,"noerr":0,"x":463.0002212524414,"y":566.9334878921509,"wires":[["e38ee703.cc84d8"]]},{"id":"3293f4dd.8ae4ac","type":"comment","z":"6d303948.304338","name":"Sends logger code and channel when erroneous assets has been clicked","info":"","x":570.9336242675781,"y":606.9334173202515,"wires":[]},{"id":"42680e34.7b364","type":"comment","z":"6d303948.304338","name":"Make a list of errors for the asset and according to filters","info":"Dashbard table adapted from code by Steve Rickus:\nhttps://groups.google.com/forum/#!topic/node-red/GZV1PUzzWFM","x":837.9335746765137,"y":449.933500289917,"wires":[]},{"id":"4fd1bef7.cfdf6","type":"http request","z":"6d303948.304338","name":"EMS package data","method":"GET","ret":"obj","url":"","tls":"","x":692.7338752746582,"y":830.9341621398926,"wires":[["daaaec21.e4775","95782c26.8dce7"]]},{"id":"520cf15a.42379","type":"function","z":"6d303948.304338","name":"File URL","func":"/* */\n\nvar resources = msg.payload.result.resources;\n\nif (resources!==null && resources.length>0){\n    \n    var lookingFor = context.get(\"fileName\");\n    msg.payload = \"\";\n    msg.url = \"\";\n    msg.topic = \"meter readings\";\n\n    var apikey = global.get(\"apikey\");\n    var apiuser = global.get(\"apiuser\");\n    var apipass = global.get(\"apipass\");\n\n    // Add api key to message request header\n    msg.headers = {\n        \"X-CKAN-API-Key\" : apikey\n    };\n\n    var urlPt2 = \"\\\" WHERE device_id='\"+global.get(\"loggerCode\")+\"' \";\n    var urlPt3 = \"AND module_key='\"+global.get(\"loggerChannel\")+\"'\";\n\n    for (var i = 0; i < resources.length; i++){ // look at every resource\n\n        // if the resource is the one needed to display\n        if (resources[i].name == lookingFor){\n        \n            var urlPt1 = \"https://ckan.lancaster.ac.uk/api/3/action/datastore_search_sql?sql=SELECT * FROM \\\"\"+msg.payload.result.resources[i].id+\"\\\" \";\n        \n            var url = urlPt1 + urlPt2 + urlPt3;\n            msg.url = url;\n        }\n    }\n    return msg;\n}","outputs":1,"noerr":0,"x":900.9340953826904,"y":869.9341659545898,"wires":[["efc1010a.76d86","c8dc4e44.e8532"]]},{"id":"c8dc4e44.e8532","type":"debug","z":"6d303948.304338","name":"","active":true,"console":"false","complete":"true","x":969.9333992004395,"y":792.9339122772217,"wires":[]},{"id":"b85adaef.ad6788","type":"http request","z":"6d303948.304338","name":"BMS package data","method":"GET","ret":"obj","url":"","tls":"","x":1070.9336204528809,"y":673.9338493347168,"wires":[[]]},{"id":"99397fac.08379","type":"debug","z":"6d303948.304338","name":"","active":false,"console":"false","complete":"payload","x":404.9334354400635,"y":103.93338584899902,"wires":[]},{"id":"780ff839.05d008","type":"ui_text","z":"6d303948.304338","group":"69b0b48b.63802c","order":0,"width":"6","height":"1","name":"Harware Type:","label":"Harware Type:","format":"{{msg.payload.hardware}}","layout":"row-spread","x":414.16687202453613,"y":144.46669578552246,"wires":[]},{"id":"e464a408.3c5568","type":"ui_text","z":"6d303948.304338","group":"69b0b48b.63802c","order":0,"width":"6","height":"1","name":"","label":"Logger Code:","format":"{{msg.payload.loggerCode}}","layout":"row-spread","x":411.9333896636963,"y":182.93334197998047,"wires":[]},{"id":"12204bc2.4e9874","type":"ui_text","z":"6d303948.304338","group":"69b0b48b.63802c","order":0,"width":"6","height":"1","name":"","label":"Logger Channel:","format":"{{msg.payload.loggerChannel}}","layout":"row-spread","x":411.9333896636963,"y":221.93334197998047,"wires":[]},{"id":"8c0bb250.11824","type":"ui_text","z":"6d303948.304338","group":"69b0b48b.63802c","order":0,"width":"6","height":"1","name":"","label":"Utility:","format":"{{msg.payload.util}}","layout":"row-spread","x":382.9333896636963,"y":259.93334197998047,"wires":[]},{"id":"7316d40f.0d776c","type":"ui_text","z":"6d303948.304338","group":"69b0b48b.63802c","order":0,"width":"6","height":"1","name":"","label":"Errors:","format":"{{msg.payload.nErrors}}","layout":"row-spread","x":382.93333625793457,"y":297.93332862854004,"wires":[]},{"id":"ba25c1fd.af577","type":"comment","z":"6d303948.304338","name":"Data from clicked row","info":"","x":126.93331909179688,"y":211.93332862854004,"wires":[]},{"id":"77318f0b.ad5e7","type":"ui_date_picker","z":"6d303948.304338","name":"","label":"From","group":"8757672e.00c4c8","order":1,"width":"5","height":"1","passthru":false,"topic":"","x":353.9334526062012,"y":406.9333553314209,"wires":[["7f0a8993.fd2f38"]]},{"id":"3ef5b47f.93271c","type":"ui_date_picker","z":"6d303948.304338","name":"","label":"To","group":"8757672e.00c4c8","order":2,"width":"5","height":"1","passthru":false,"topic":"","x":353.9334182739258,"y":446.9333543777466,"wires":[["8fb4323a.00a09"]]},{"id":"843df53f.606dc8","type":"comment","z":"6d303948.304338","name":"Overview of all asset details","info":"","x":452.9333190917969,"y":63.933326721191406,"wires":[]},{"id":"9d27cfd5.92b36","type":"comment","z":"6d303948.304338","name":"List of all errors from asset","info":"","x":412.9333724975586,"y":366.9333600997925,"wires":[]},{"id":"7750c02a.4c2f6","type":"comment","z":"6d303948.304338","name":"Data from clicked row","info":"","x":241.933349609375,"y":528.9333457946777,"wires":[]},{"id":"fa76bfb6.fda52","type":"link in","z":"6d303948.304338","name":"SystemList In","links":["54db8307.48badc","85f03be5.ae5ee8"],"x":213.93331909179688,"y":902.7999267578125,"wires":[["e2ae58e1.4a2b38"]]},{"id":"a4c4a4aa.9a3bb8","type":"comment","z":"6d303948.304338","name":"Data from clicked asset","info":"","x":131.8664789199829,"y":863.7997922897339,"wires":[]},{"id":"f98ec70d.0769c8","type":"comment","z":"6d303948.304338","name":"List of errors from Overview","info":"","x":148,"y":449.9333643913269,"wires":[]},{"id":"51e43c3f.855a24","type":"link in","z":"6d303948.304338","name":"SystemList In","links":["e0c6f314.51f65"],"x":213.93331909179688,"y":808.7999877929688,"wires":[["843d6432.ccfac8"]]},{"id":"503bdac.d0b6a24","type":"comment","z":"6d303948.304338","name":"Data from clicked error","info":"","x":131.8664789199829,"y":769.7998533248901,"wires":[]},{"id":"e2ae58e1.4a2b38","type":"function","z":"6d303948.304338","name":"EMS or BMS Filename / URL","func":"if (msg.payload.hardware==\"logger\"){\n    return null;\n}\n\nvar BMS_CLASS_GROUP = \"Energy sensor\";\nvar EMS_CLASS_GROUP = \"Energy meter\";\n\nvar sensors = global.get(\"meters\"); // list all sensors\nvar months = [ \"jan\", \"feb\", \"mar\", \"apr\", \"may\", \"jun\", \"jul\", \"aug\", \"sep\", \"oct\", \"nov\", \"dec\" ];\nvar fileName = null;\n\nvar apikey = global.get(\"apikey\");\nvar apiuser = global.get(\"apiuser\");\nvar apipass = global.get(\"apipass\");\n\n// Add api key to message request header\nmsg.headers = {\n    \"X-CKAN-API-Key\" : apikey\n};\n\nvar now = new Date();\nvar month = months[now.getMonth()];\nvar year = now.getFullYear();\n            \nfor (var i = 0; i < sensors.length; i++){ // for every meter\n\n    // if the meter is the one being analysed    \n    if(sensors[i][\"Logger Asset Code\"]==msg.payload.loggerCode && sensors[i][\"Logger Channel\"]==msg.payload.loggerChannel){\n        \n        var classGroup = sensors[i][\"Classification Group\"]; // is it EMS or BMS data?\n        \n        if (classGroup == EMS_CLASS_GROUP){ // its ems data\n            \n            msg.file = \"ems-\"+month+\"-\"+year;\n            context.set(\"fileName\", \"ems-\"+month+\"-\"+year);\n            msg.url = \"https://ckan.lancaster.ac.uk/api/3/action/package_show?id=ems\";\n            msg.topic = \"EMS metadata\";\n            return [msg, null];\n        }\n        else if (classGroup == BMS_CLASS_GROUP){ // its bms data\n            \n            msg.file = \"bms-\"+month+\"-\"+year;\n            context.set(\"fileName\", \"bms-\"+month+\"-\"+year);\n            msg.url = \"https://ckan.lancaster.ac.uk/api/3/action/package_show?id=bms\";\n            msg.topic = \"BMS metadata\";\n            return [null, msg];\n        }\n    }\n}\nreturn null;","outputs":"2","noerr":0,"x":393.93335342407227,"y":902.7333698272705,"wires":[["4fd1bef7.cfdf6"],["59d11d6c.336cf4"]]},{"id":"316c398.71c56c6","type":"http request","z":"6d303948.304338","name":"Meter Readings","method":"GET","ret":"obj","url":"","tls":"","x":1089.9332084655762,"y":830.7335758209229,"wires":[["4f3d6d36.e6f394","1e1eb2cf.6a28cd"]]},{"id":"8fb4323a.00a09","type":"function","z":"6d303948.304338","name":"Store","func":"/* */\n\nglobal.set(\"errorsTo\", msg.payload);\nreturn msg;","outputs":1,"noerr":0,"x":491.9333190917969,"y":446.9333190917969,"wires":[["e38ee703.cc84d8"]]},{"id":"7f0a8993.fd2f38","type":"function","z":"6d303948.304338","name":"Store","func":"/* */\n\nglobal.set(\"errorsFrom\", msg.payload);\nreturn msg;","outputs":1,"noerr":0,"x":491.9333190917969,"y":406.9333190917969,"wires":[["e38ee703.cc84d8"]]},{"id":"843d6432.ccfac8","type":"function","z":"6d303948.304338","name":"EMS or BMS Filename / URL","func":"if (msg.payload.hardware==\"logger\"){\n    return null;\n}\n\nvar BMS_CLASS_GROUP = \"Energy sensor\";\nvar EMS_CLASS_GROUP = \"Energy meter\";\n\nvar sensors = global.get(\"meters\"); // list all sensors\nvar months = [ \"jan\", \"feb\", \"mar\", \"apr\", \"may\", \"jun\", \"jul\", \"aug\", \"sep\", \"oct\", \"nov\", \"dec\" ];\nvar fileName = null;\n\nvar apikey = global.get(\"apikey\");\nvar apiuser = global.get(\"apiuser\");\nvar apipass = global.get(\"apipass\");\n\nvar dateString = msg.payload.time;\nmsg.string = dateString;\nvar day   = parseInt(dateString.substring(8,10));\nvar mnt  = parseInt(dateString.substring(5,7));\nvar yr   = parseInt(dateString.substring(0,4));\nvar date = new Date(yr, mnt-1, day);\nmsg.date = date;\nvar month = months[date.getMonth()];\nvar year = date.getFullYear();\n\n// Add api key to message request header\nmsg.headers = {\n    \"X-CKAN-API-Key\" : apikey\n};\n\nfor (var i = 0; i < sensors.length; i++){\n    \n    if(sensors[i][\"Logger Asset Code\"]==msg.payload.loggerCode && sensors[i][\"Logger Channel\"]==msg.payload.loggerChannel){\n        \n        var classGroup = sensors[i][\"Classification Group\"];\n        \n        if (classGroup == EMS_CLASS_GROUP){ // its ems data\n\n            context.set(\"fileName\", \"ems-\"+month+\"-\"+year);\n            msg.file = \"ems-\"+month+\"-\"+year;\n            msg.url = \"https://ckan.lancaster.ac.uk/api/3/action/package_show?id=ems\";\n            msg.topic = \"EMS metadata\";\n            return [msg, null];\n        }\n        else if (classGroup == BMS_CLASS_GROUP){ // its bms data\n            \n            context.set(\"fileName\", \"bms-\"+month+\"-\"+year);\n            msg.file = \"bms-\"+month+\"-\"+year;\n            msg.url = \"https://ckan.lancaster.ac.uk/api/3/action/package_show?id=bms\";\n            msg.topic = \"BMS metadata\";\n            return [null, msg];\n        }\n    }\n}\nreturn null;","outputs":"2","noerr":0,"x":396.16682052612305,"y":808.3337020874023,"wires":[["4fd1bef7.cfdf6"],["59d11d6c.336cf4"]]},{"id":"d78d1506.09a3e8","type":"inject","z":"6d303948.304338","name":"","topic":"","payload":"01/01/2016","payloadType":"str","repeat":"","crontab":"","once":true,"x":196.16666412353516,"y":407.6000633239746,"wires":[["77318f0b.ad5e7"]]},{"id":"48640934.655a78","type":"comment","z":"6d303948.304338","name":"Get the ckan data for the specified meter either this month or the month of the clicked error","info":"","x":912.9332962036133,"y":910.6666622161865,"wires":[]},{"id":"59d11d6c.336cf4","type":"http request","z":"6d303948.304338","name":"BMS package data","method":"GET","ret":"obj","url":"","tls":"","x":693.9332962036133,"y":869.6666555404663,"wires":[["520cf15a.42379","95782c26.8dce7"]]},{"id":"6e9d243f.21f70c","type":"comment","z":"6d303948.304338","name":"If the asset is a meter, display its readings","info":"","x":190.93331909179688,"y":713.7999877929688,"wires":[]},{"id":"daaaec21.e4775","type":"function","z":"6d303948.304338","name":"File URL","func":"/* */\n\nif (msg.payload!==null && msg.payload.result.resources.length>0){\n    \n    var lookingFor = context.get(\"fileName\");\n    msg.payload = \"\";\n    msg.url = \"\";\n    msg.topic = \"meter readings\";\n\n    var apikey = global.get(\"apikey\");\n    var apiuser = global.get(\"apiuser\");\n    var apipass = global.get(\"apipass\");\n\n    // Add api key to message request header\n    msg.headers = {\n        \"X-CKAN-API-Key\" : apikey\n    };\n\n    var urlPt2 = \"\\\" WHERE device_id='\"+global.get(\"loggerCode\")+\"' \";\n    var urlPt3 = \"AND module_key='\"+global.get(\"loggerChannel\")+\"'\";\n\n    for (var i = 0; i < msg.payload.result.resources.length; i++){ // look at every resource\n\n        // if the resource is the one needed to display\n        if (msg.payload.result.resources[i].name == lookingFor){\n        \n            var urlPt1 = \"https://ckan.lancaster.ac.uk/api/3/action/datastore_search_sql?sql=SELECT * FROM \\\"\"+msg.payload.result.resources[i].id+\"\\\" \";\n        \n            var url = urlPt1 + urlPt2 + urlPt3;\n            msg.url = url;\n        }\n    }\n    return msg;\n}","outputs":1,"noerr":0,"x":899.9332885742188,"y":830.7999267578125,"wires":[["c8dc4e44.e8532"]]},{"id":"b55604cc.dfefd8","type":"comment","z":"6d303948.304338","name":"EMS Metadata needs changing, this will need displaying like the BMS below","info":"","x":1277.9332122802734,"y":753.8002376556396,"wires":[]},{"id":"efc1010a.76d86","type":"http request","z":"6d303948.304338","name":"Meter Readings","method":"GET","ret":"obj","url":"","tls":"","x":1089.9332275390625,"y":869.7999267578125,"wires":[["1e1eb2cf.6a28cd","4f3d6d36.e6f394"]]},{"id":"1e1eb2cf.6a28cd","type":"function","z":"6d303948.304338","name":"Load Data","func":"msg.payload = [];       // This will be an array of {topic, data} objects\nvar dataPoints = [];   // Array of data points \n\n// Create a data point for every reading of the meter\nfor (var i = 0; i < msg.payload.result.records; i++) {\n    var point = {};\n    point.x = msg.payload.result.records[i].timestamp;\n    point.y = msg.payload.result.records[i].param_value;\n    // build the data array    \n    dataPoints.push(point);\n}\n\nmsg.action = \"load\";    // This instructs the chart node to paint the data\nmsg.payload = [{topic: \"Reading\", data: dataPoints}]; // The payload is an array of {topic, data} objects\nreturn msg;","outputs":1,"noerr":0,"x":1287.9332122802734,"y":852.5335636138916,"wires":[["593287ff.26d1b8"]]},{"id":"2f126c8f.969344","type":"csv","z":"6d303948.304338","name":"","sep":",","hdrin":"","hdrout":"","multi":"one","ret":"\\n","temp":"","x":230.1669158935547,"y":1072.200894355774,"wires":[[]]},{"id":"4f3d6d36.e6f394","type":"debug","z":"6d303948.304338","name":"","active":true,"console":"false","complete":"true","x":1194.9332313537598,"y":792.6666221618652,"wires":[]},{"id":"95782c26.8dce7","type":"debug","z":"6d303948.304338","name":"","active":true,"console":"false","complete":"true","x":785.9333076477051,"y":792.6666584014893,"wires":[]},{"id":"fb8c6177.77efd","type":"ui_group","z":"","name":"Error Graph","tab":"f7c8efaf.1e9ce","order":3,"disp":true,"width":"15"},{"id":"8757672e.00c4c8","type":"ui_group","z":"","name":"All Errors","tab":"f7c8efaf.1e9ce","order":2,"disp":true,"width":"15"},{"id":"69b0b48b.63802c","type":"ui_group","z":"","name":"Overview","tab":"f7c8efaf.1e9ce","order":1,"disp":true,"width":"30"},{"id":"f7c8efaf.1e9ce","type":"ui_tab","z":"","name":"Error Details","icon":"error_outline","order":3}]
